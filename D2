#include <iostream>
#include <vector>

using std::cin;
using std::cout;
using std::swap;
using std::vector;
using std::ios_base;
using std::string;

struct Heap {

private:
    vector <long long> heap;
    vector <int> pointer;
    vector <int> identifier;

    void Exchange(int index_1, int index_2) {
        swap(identifier[index_1], identifier[index_2]);
        swap(pointer[identifier[index_1]], pointer[identifier[index_2]]);
        swap(heap[index_1], heap[index_2]);
    }


public:
    Heap() = default;

    void Sift_Down(int index) {
        while (index * 2 < heap.size()) {
            int tmp = index * 2;
            if (((index * 2 + 1) < heap.size()) && (heap[index * 2 + 1] < heap[index * 2])) {
                tmp = index * 2 + 1;
            }
            if (heap[tmp] < heap[index]) {
                Exchange(tmp, index);
                index = tmp;
            } else break;
        }
    }

    void Sift_Up(int index) {
        while (index != 0) {
            if (heap[index] < heap[index / 2]) {
                Exchange(index, index / 2);
                index /= 2;
            } else break;
        }
    }

    void Insert(long long x) {
        heap.push_back(x);
        identifier.push_back(pointer.size());
        pointer.push_back(heap.size() - 1);
        Sift_Up(heap.size() - 1);
    }

    long long Get_Min() {
        pointer.push_back(-1);
        return heap[0];
    }

    void Extract_Min() {
        Exchange(0, heap.size() -  1);
        heap.pop_back();
        identifier.pop_back();
        Sift_Down(0);
        pointer.push_back(-1);
    }

    void Decrease_Key(int index, long long delta) {
        heap[pointer[index]] -= delta;
        Sift_Up(pointer[index]);
        pointer.push_back(-1);
    }

};

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int q;
    cin >> q;

    Heap* heap = new Heap();

    string command;
    int i;
    long long x, delta;

    for (int j = 0; j < q; j++) {
        cin >> command;
        if (command == "insert") {
            cin >> x;
            heap->Insert(x);
        } else if (command == "getMin") {
            cout << heap->Get_Min();
            cout << "\n";
        } else if (command == "extractMin") {
            heap->Extract_Min();
        } else {
            cin >> i >> delta;
            i--;
            heap->Decrease_Key(i, delta);
        }

    }
}
